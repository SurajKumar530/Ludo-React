{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dev1\\\\Ludo-React\\\\src\\\\components\\\\gameSetup.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useRecoilState, useResetRecoilState } from \"recoil\";\nimport { playerOrder } from \"../config/constants\";\nimport * as states from \"../recoil/atoms\";\n/**\r\n * This component is being called from GameSetup, and handles the player count buttons.\r\n * @param {Object} props\r\n * @returns JSX\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PlayerButton({\n  count,\n  setTransClass\n}) {\n  _s();\n\n  const setCurrentPlayer = useRecoilState(states.currentPlayerState)[1];\n  const setCurrentPlayersList = useRecoilState(states.currentPlayersListState)[1];\n  const resetBlockState = useResetRecoilState(states.allBlockState);\n  const resetCoinState = useResetRecoilState(states.allCoinState);\n  const resetDiceState = useResetRecoilState(states.currentDiceState); // Event handler for button onClick.\n\n  const handleClick = () => {\n    const randomNum = Math.floor(Math.random() * 2);\n    const playersList = count === 2 ? [playerOrder[randomNum], playerOrder[randomNum + 2]] : count === 3 ? playerOrder.slice(randomNum, randomNum + 3) : [...playerOrder]; // reset previous states\n\n    resetBlockState();\n    resetCoinState();\n    resetDiceState();\n    setCurrentPlayersList([...playersList]);\n    setCurrentPlayer(playersList[0]); // console.log(currentPlayersList, playersList);\n\n    setTransClass(\" scaleDown\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameSetupPlayerSelectBtn\",\n    onClick: handleClick,\n    children: count\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n/**\r\n * This component handles the screen where user can choose the players count.\r\n * @returns JSX\r\n */\n\n\n_s(PlayerButton, \"HBXvR34bEqKhSCzxDfOUeBKSgCg=\", false, function () {\n  return [useRecoilState, useRecoilState, useResetRecoilState, useResetRecoilState, useResetRecoilState];\n});\n\n_c = PlayerButton;\n\nfunction GameSetup() {\n  _s2();\n\n  const [transClass, setTransClass] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameSetup\" + transClass,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: \"white\",\n        fontSize: 20\n      },\n      children: \"Welcome to LUDO\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: \"white\",\n        fontSize: 20\n      },\n      children: \"Choose players\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [2, 3, 4].map(i => /*#__PURE__*/_jsxDEV(PlayerButton, {\n        count: i,\n        setTransClass: className => setTransClass(className)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(GameSetup, \"JUj6CFkAkkwZX2UrU4COVUtEzbQ=\");\n\n_c2 = GameSetup;\nexport default GameSetup;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PlayerButton\");\n$RefreshReg$(_c2, \"GameSetup\");","map":{"version":3,"sources":["C:/Users/dev1/Ludo-React/src/components/gameSetup.js"],"names":["useState","useRecoilState","useResetRecoilState","playerOrder","states","PlayerButton","count","setTransClass","setCurrentPlayer","currentPlayerState","setCurrentPlayersList","currentPlayersListState","resetBlockState","allBlockState","resetCoinState","allCoinState","resetDiceState","currentDiceState","handleClick","randomNum","Math","floor","random","playersList","slice","GameSetup","transClass","color","fontSize","map","i","className"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport { useRecoilState, useResetRecoilState } from \"recoil\";\r\nimport { playerOrder } from \"../config/constants\";\r\nimport * as states from \"../recoil/atoms\";\r\n\r\n/**\r\n * This component is being called from GameSetup, and handles the player count buttons.\r\n * @param {Object} props\r\n * @returns JSX\r\n */\r\nfunction PlayerButton({ count, setTransClass }) {\r\n  const setCurrentPlayer = useRecoilState(states.currentPlayerState)[1];\r\n  const setCurrentPlayersList = useRecoilState(\r\n    states.currentPlayersListState\r\n  )[1];\r\n\r\n  const resetBlockState = useResetRecoilState(states.allBlockState);\r\n  const resetCoinState = useResetRecoilState(states.allCoinState);\r\n  const resetDiceState = useResetRecoilState(states.currentDiceState);\r\n\r\n  // Event handler for button onClick.\r\n  const handleClick = () => {\r\n    const randomNum = Math.floor(Math.random() * 2);\r\n    const playersList =\r\n      count === 2\r\n        ? [playerOrder[randomNum], playerOrder[randomNum + 2]]\r\n        : count === 3\r\n        ? playerOrder.slice(randomNum, randomNum + 3)\r\n        : [...playerOrder];\r\n\r\n    // reset previous states\r\n    resetBlockState();\r\n    resetCoinState();\r\n    resetDiceState();\r\n\r\n    setCurrentPlayersList([...playersList]);\r\n    setCurrentPlayer(playersList[0]);\r\n    // console.log(currentPlayersList, playersList);\r\n    setTransClass(\" scaleDown\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"gameSetupPlayerSelectBtn\" onClick={handleClick}>\r\n      {count}\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * This component handles the screen where user can choose the players count.\r\n * @returns JSX\r\n */\r\nfunction GameSetup() {\r\n  const [transClass, setTransClass] = useState(\"\");\r\n\r\n  return (\r\n    <div className={\"gameSetup\" + transClass}>\r\n      <h1 style={{ color: \"white\", fontSize: 20 }}>Welcome to LUDO</h1>\r\n      <h1 style={{ color: \"white\", fontSize: 20 }}>Choose players</h1>\r\n      <div>\r\n        {[2, 3, 4].map((i) => (\r\n          <PlayerButton\r\n            key={i}\r\n            count={i}\r\n            setTransClass={(className) => setTransClass(className)}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameSetup;\r\n"]},"metadata":{},"sourceType":"module"}