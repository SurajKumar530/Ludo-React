[{"C:\\Users\\dev1\\Ludo-React\\src\\index.js":"1","C:\\Users\\dev1\\Ludo-React\\src\\App.js":"2","C:\\Users\\dev1\\Ludo-React\\src\\reportWebVitals.js":"3","C:\\Users\\dev1\\Ludo-React\\src\\recoil\\atoms.js":"4","C:\\Users\\dev1\\Ludo-React\\src\\components\\homeCenter.js":"5","C:\\Users\\dev1\\Ludo-React\\src\\components\\stepsGrid.js":"6","C:\\Users\\dev1\\Ludo-React\\src\\components\\homeBox.js":"7","C:\\Users\\dev1\\Ludo-React\\src\\components\\gameSetup.js":"8","C:\\Users\\dev1\\Ludo-React\\src\\config\\constants.js":"9","C:\\Users\\dev1\\Ludo-React\\src\\components\\coin.js":"10","C:\\Users\\dev1\\Ludo-React\\src\\components\\dice.js":"11","C:\\Users\\dev1\\Ludo-React\\src\\components\\stepsBox.js":"12"},{"size":601,"mtime":1728709332724,"results":"13","hashOfConfig":"14"},{"size":4260,"mtime":1728712174559,"results":"15","hashOfConfig":"14"},{"size":375,"mtime":1728709332727,"results":"16","hashOfConfig":"14"},{"size":1709,"mtime":1728709332726,"results":"17","hashOfConfig":"14"},{"size":1354,"mtime":1728709332720,"results":"18","hashOfConfig":"14"},{"size":729,"mtime":1728709332722,"results":"19","hashOfConfig":"14"},{"size":1152,"mtime":1728709332719,"results":"20","hashOfConfig":"14"},{"size":2185,"mtime":1728711773240,"results":"21","hashOfConfig":"14"},{"size":3852,"mtime":1728709332723,"results":"22","hashOfConfig":"14"},{"size":7536,"mtime":1728709332716,"results":"23","hashOfConfig":"14"},{"size":1564,"mtime":1728709332717,"results":"24","hashOfConfig":"14"},{"size":1225,"mtime":1728709332721,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"bkmb0w",{"filePath":"29","messages":"30","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"28"},"C:\\Users\\dev1\\Ludo-React\\src\\index.js",[],["56","57"],"C:\\Users\\dev1\\Ludo-React\\src\\App.js",["58","59","60","61","62"],"import \"./styles/App.css\";\r\nimport { useEffect } from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport _ from \"lodash\";\r\n\r\nimport * as states from \"./recoil/atoms\";\r\n\r\nimport HomeCenter from \"./components/homeCenter\";\r\nimport StepsGrid from \"./components/stepsGrid\";\r\nimport HomeBox from \"./components/homeBox\";\r\nimport GameSetup from \"./components/gameSetup\";\r\nimport { colorMap, moves, playerOrder } from \"./config/constants\";\r\n\r\nfunction Emulation() {\r\n  const [currentPlayer, setCurrentPlayer] = useRecoilState(\r\n    states.currentPlayerState\r\n  );\r\n  const [diceState, setDiceState] = useRecoilState(states.currentDiceState);\r\n  const [blockState, setBlockState] = useRecoilState(states.allBlockState);\r\n  const [coinState, setCoinState] = useRecoilState(states.allCoinState);\r\n  const playersList = useRecoilValue(states.currentPlayersListState);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(JSON.stringify({ blockState, coinState }, 0, 2));\r\n  // }, [JSON.stringify(coinState), JSON.stringify(blockState)]);\r\n\r\n  return (\r\n    <div>\r\n      {[1, 2, 3, 4, 5, 6].map((i) => (\r\n        <button\r\n          key={i}\r\n          onClick={() => {\r\n            setDiceState({\r\n              num: i,\r\n              isLocked: false,\r\n              lastRolledBy: currentPlayer,\r\n            });\r\n          }}\r\n        >\r\n          {i}\r\n        </button>\r\n      ))}\r\n      <br />\r\n      {playersList.map((elem, i) => (\r\n        <button\r\n          key={i}\r\n          onClick={() => {\r\n            setCurrentPlayer(elem);\r\n          }}\r\n          style={{ backgroundColor: elem }}\r\n        >\r\n          {elem}\r\n        </button>\r\n      ))}\r\n      <div>\r\n        <span>Enter (eg; p1-t40): </span>\r\n        <input\r\n          type=\"text\"\r\n          onKeyUp={({ code, currentTarget: { value } }) => {\r\n            if (code === \"Enter\") {\r\n              if (value.match(/^[pyrt][0-3]-[pyrt]\\d{2}$/)) {\r\n                const [coinKey, boxKey] = value.split(\"-\");\r\n                const parent = colorMap[coinKey[0]];\r\n                if (!playersList.includes(parent)) return;\r\n                const oldPosition = coinState[parent][coinKey].position;\r\n\r\n                setCoinState({\r\n                  ...coinState,\r\n                  [parent]: {\r\n                    ...coinState[parent],\r\n                    [coinKey]: { position: boxKey, isTurnAvailable: false },\r\n                  },\r\n                });\r\n\r\n                const oldBlockState = _.cloneDeep(blockState);\r\n\r\n                oldPosition &&\r\n                  !oldPosition.includes(\"home\") &&\r\n                  oldBlockState[oldPosition].splice(\r\n                    oldBlockState[oldPosition].indexOf(coinKey),\r\n                    1\r\n                  );\r\n\r\n                setBlockState({\r\n                  ...oldBlockState,\r\n                  [boxKey]: [\r\n                    ...new Set([...(oldBlockState[boxKey] || []), coinKey]),\r\n                  ],\r\n                });\r\n              } else alert(\"Wrong input!\");\r\n            }\r\n          }}\r\n        ></input>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <GameSetup />\r\n      <div className=\"App\">\r\n        <div className=\"boardWrapper\">\r\n          <div className=\"innerRow\">\r\n            <HomeBox parent=\"palegreen\" />\r\n            <StepsGrid parent=\"yellow\" adjacentDirection=\"leftOrTop\" />\r\n            <HomeBox parent=\"yellow\" />\r\n          </div>\r\n          <div className=\"innerRow\">\r\n            <StepsGrid\r\n              style={{ transform: \"rotate(90deg)\" }}\r\n              parent=\"palegreen\"\r\n              adjacentDirection=\"rightOrBottom\"\r\n            />\r\n            <HomeCenter />\r\n            <StepsGrid\r\n              style={{ transform: \"rotate(90deg)\" }}\r\n              parent=\"royalblue\"\r\n              adjacentDirection=\"leftOrTop\"\r\n            />\r\n          </div>\r\n          <div className=\"innerRow\">\r\n            <HomeBox parent=\"tomato\" />\r\n            <StepsGrid parent=\"tomato\" adjacentDirection=\"rightOrBottom\" />\r\n            <HomeBox parent=\"royalblue\" />\r\n          </div>\r\n        </div>\r\n        <br />\r\n        {/* {process.env.NODE_ENV === \"development\" && <Emulation />} */}\r\n      </div>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\dev1\\Ludo-React\\src\\reportWebVitals.js",[],"C:\\Users\\dev1\\Ludo-React\\src\\recoil\\atoms.js",[],"C:\\Users\\dev1\\Ludo-React\\src\\components\\homeCenter.js",[],"C:\\Users\\dev1\\Ludo-React\\src\\components\\stepsGrid.js",[],"C:\\Users\\dev1\\Ludo-React\\src\\components\\homeBox.js",["63"],"import { useRecoilValue } from \"recoil\";\r\nimport {\r\n  allCoinState,\r\n  currentDiceState,\r\n  currentPlayerState,\r\n  currentPlayersListState,\r\n} from \"../recoil/atoms\";\r\nimport Coin from \"./coin\";\r\n\r\n// This component is for 4 blocks that stores COIN in initial state.\r\nfunction HomeBox({ parent }) {\r\n  const coinState = useRecoilValue(allCoinState);\r\n  const currentPlayer = useRecoilValue(currentPlayerState);\r\n  const playersList = useRecoilValue(currentPlayersListState);\r\n\r\n  // const currentDiceNum = useRecoilValue(currentDiceState);\r\n\r\n  return (\r\n    <div className={\"homeBox\"}>\r\n      {currentPlayer === parent && <div className={\"homeBoxOverlay\"}></div>}\r\n      {Array(4)\r\n        .fill()\r\n        .map((_, i) => (\r\n          <div\r\n            key={i}\r\n            className={\"homeBoxInner\"}\r\n            style={{ border: `20px solid ${parent}` }}\r\n          >\r\n            {playersList.includes(parent) &&\r\n              coinState[parent][parent[0] + i].position === \"home\" && (\r\n                <Coin parent={parent} index={parent[0] + i} />\r\n              )}\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomeBox;\r\n","C:\\Users\\dev1\\Ludo-React\\src\\components\\gameSetup.js",[],"C:\\Users\\dev1\\Ludo-React\\src\\config\\constants.js",[],"C:\\Users\\dev1\\Ludo-React\\src\\components\\coin.js",["64","65","66"],"import { useState, useEffect } from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport _ from \"lodash\";\r\n\r\nimport {\r\n  currentPlayerState,\r\n  allCoinState,\r\n  allBlockState,\r\n  currentDiceState,\r\n  currentPlayersListState,\r\n} from \"../recoil/atoms\";\r\nimport { startMoves, moves, starIndexes, colorMap } from \"../config/constants\";\r\nimport coinPalegreen from \"../assets/coinPalegreen.svg\";\r\nimport coinYellow from \"../assets/coinYellow.svg\";\r\nimport coinTomato from \"../assets/coinTomato.svg\";\r\nimport coinRoyalblue from \"../assets/coinRoyalblue.svg\";\r\nimport coinMoveSound from \"../assets/coinMove.mp3\";\r\n\r\nconst images = {\r\n  palegreen: coinPalegreen,\r\n  yellow: coinYellow,\r\n  tomato: coinTomato,\r\n  royalblue: coinRoyalblue,\r\n};\r\n\r\n/**\r\n * Component for COIN that moves over entire board.\r\n * @param {Object} props\r\n * @returns JSX\r\n */\r\nfunction Coin({ parent, index, className }) {\r\n  const [currentPlayer, setCurrentPlayer] = useRecoilState(currentPlayerState);\r\n  const [coinState, setCoinState] = useRecoilState(allCoinState);\r\n  const [blockState, setBlockState] = useRecoilState(allBlockState);\r\n  const [diceState, setDiceState] = useRecoilState(currentDiceState);\r\n  const playersList = useRecoilValue(currentPlayersListState);\r\n\r\n  const { position: currentPosition, isTurnAvailable } =\r\n    coinState[parent][index];\r\n\r\n  // checks if the current position of coin is not home or won\r\n  const isPositionNotHomeOrWon = [\"home\", \"won\"].every(\r\n    (x) => !currentPosition.includes(x)\r\n  );\r\n\r\n  const parentMoves = moves[parent];\r\n  // Calculate next possible move for current coin\r\n  const nextMove = isPositionNotHomeOrWon\r\n    ? diceState.num &&\r\n      parentMoves.indexOf(currentPosition) + diceState.num < parentMoves.length\r\n      ? parentMoves[parentMoves.indexOf(currentPosition) + diceState.num]\r\n      : null\r\n    : currentPosition === \"home\"\r\n    ? startMoves[parent]\r\n    : \"\";\r\n\r\n  // Check with nextMove & diceNum; if the coin can move or not\r\n  const moveableClass =\r\n    currentPlayer === parent && nextMove\r\n      ? // (!currentPosition && nextMove) ||\r\n        // currentPosition === nextMove\r\n        // ? \"\"\r\n        // :\r\n        isTurnAvailable\r\n        ? isPositionNotHomeOrWon || diceState.num === 6\r\n          ? \" current-player-animation\"\r\n          : \"\"\r\n        : isPositionNotHomeOrWon && diceState.num\r\n        ? \" current-player-animation\"\r\n        : \"\"\r\n      : \"\";\r\n\r\n  /**\r\n   * This useEffect tracks the dice change and accordingly sets `isTurnAvailable`\r\n   * and also changes the player if next moe is not possible\r\n   */\r\n  useEffect(() => {\r\n    const currentPlayerCoins = coinState[parent];\r\n\r\n    if (diceState.num && currentPlayer === parent) {\r\n      const updatedState = _.cloneDeep(currentPlayerCoins);\r\n      let moveAvailCount = 0;\r\n\r\n      Object.keys(updatedState).forEach((key) => {\r\n        const position = updatedState[key].position;\r\n        if (\r\n          (position === \"home\" && diceState.num === 6) ||\r\n          ([\"home\", \"won\"].every((x) => !position.includes(x)) &&\r\n            parentMoves.indexOf(position) + diceState.num < parentMoves.length)\r\n        ) {\r\n          console.log({ position });\r\n          updatedState[key].isTurnAvailable = true;\r\n          moveAvailCount++;\r\n        } else {\r\n          updatedState[key].isTurnAvailable = false;\r\n        }\r\n      });\r\n\r\n      console.log({ moveAvailCount });\r\n\r\n      setCoinState({ ...coinState, [parent]: updatedState });\r\n      !moveAvailCount && changePlayer();\r\n    }\r\n  }, [diceState.num]);\r\n\r\n  /**\r\n   * This function updates the coin and block states accordingly, also checks if either of the coin is being killed by other.\r\n   * @param {String} parentKey              The nextMove the current coin should move to.\r\n   * @param {Object} updatedFullCoinState   Updated entire coin state object.\r\n   * @param {Object} updatedFullBlockState  Updated entire block state object.\r\n   * @param {Function} cb                   Should be called with a parameter i.e; number coins that have killed by some other coin.\r\n   * @returns void\r\n   */\r\n  const updateCoinBlockStates = (\r\n    parentKey,\r\n    updatedFullCoinState,\r\n    updatedFullBlockState,\r\n    cb\r\n  ) => {\r\n    setCoinState(updatedFullCoinState);\r\n    setBlockState(updatedFullBlockState);\r\n    updatedFullCoinState = _.cloneDeep(updatedFullCoinState);\r\n    let updatedBlockState = [];\r\n    let coinsToBeReset = [];\r\n    let isStateUpdated = false;\r\n\r\n    const currentState = updatedFullBlockState[parentKey];\r\n    if (!starIndexes.includes(parentKey) && currentState.length > 1) {\r\n      currentState.forEach((elem) => {\r\n        const allMatched = updatedBlockState.every((item) =>\r\n          item.startsWith(elem[0])\r\n        );\r\n        if (allMatched) updatedBlockState.push(elem);\r\n        else {\r\n          coinsToBeReset.push(...updatedBlockState);\r\n          updatedBlockState = [elem];\r\n        }\r\n      });\r\n\r\n      if (coinsToBeReset.length)\r\n        coinsToBeReset.forEach((key) => {\r\n          updatedFullCoinState[colorMap[key[0]]][key].position = \"home\";\r\n        });\r\n\r\n      isStateUpdated = true;\r\n    }\r\n\r\n    if (isStateUpdated) {\r\n      setCoinState(updatedFullCoinState);\r\n      setBlockState({\r\n        ...updatedFullBlockState,\r\n        [parentKey]: [...new Set(updatedBlockState)],\r\n      });\r\n    }\r\n    return cb(!!coinsToBeReset.length);\r\n  };\r\n\r\n  // Changes the player to next possible\r\n  const changePlayer = () => {\r\n    const currentPlayerIndex = playersList.indexOf(currentPlayer);\r\n    const nextPlayer =\r\n      currentPlayerIndex === -1 || !playersList[currentPlayerIndex + 1]\r\n        ? playersList[0]\r\n        : playersList[currentPlayerIndex + 1];\r\n\r\n    setTimeout(() => {\r\n      setDiceState({ num: 0, isLocked: false, lastRolledBy: currentPlayer });\r\n      setCurrentPlayer(nextPlayer);\r\n    }, 500);\r\n  };\r\n\r\n  /**\r\n   * This function is called as a event handler onClick on coin.\r\n   * Updates the coin positions and changes the player if required.\r\n   * @returns void\r\n   */\r\n  const playTurn = () => {\r\n    // prevent other player's coin moving on click when turn in of other\r\n    if (parent !== currentPlayer || !diceState.num || !moveableClass) return;\r\n\r\n    // const { position: currentPosition } = coinState[parent][index];\r\n\r\n    // if (!nextMove) return changePlayer();\r\n\r\n    new Audio(coinMoveSound).play();\r\n\r\n    const updatedCoinState = _.cloneDeep({\r\n      ...coinState[parent],\r\n      [index]: { position: nextMove, isTurnAvailable: false },\r\n    });\r\n\r\n    const updatedBlockState = _.cloneDeep(blockState);\r\n\r\n    isPositionNotHomeOrWon &&\r\n      updatedBlockState[currentPosition].splice(\r\n        updatedBlockState[currentPosition].indexOf(index),\r\n        1\r\n      );\r\n    updatedBlockState[nextMove] = [\r\n      ...new Set([...(blockState[nextMove] || []), index]),\r\n    ];\r\n\r\n    updateCoinBlockStates(\r\n      nextMove,\r\n      { ...coinState, [parent]: updatedCoinState },\r\n      updatedBlockState,\r\n      (isKilledSomeone) => {\r\n        !isKilledSomeone &&\r\n          !nextMove.includes(\"won\") &&\r\n          diceState.num !== 6 &&\r\n          changePlayer();\r\n        setDiceState({ num: 0, isLocked: false, lastRolledBy: currentPlayer });\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={\"coin\" + moveableClass}\r\n      onClick={playTurn}\r\n      // parent={parent}\r\n      // index={index}\r\n      // isMoveable={moveableClass}\r\n    >\r\n      <img src={images[parent]} className={className} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Coin;\r\n","C:\\Users\\dev1\\Ludo-React\\src\\components\\dice.js",["67"],"import { useState, useEffect } from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { currentDiceState, currentPlayerState } from \"../recoil/atoms\";\r\nimport diceRollSound from \"../assets/diceRoll2.mp3\";\r\n\r\n/**\r\n * Component for DICE.\r\n * @returns JSX\r\n */\r\nfunction Dice() {\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n  const [diceState, setDiceState] = useRecoilState(currentDiceState);\r\n  const currentPlayer = useRecoilValue(currentPlayerState);\r\n\r\n  // Generates random dice value between 1 and 6\r\n  const rotateDice = () =>\r\n    setDiceState({\r\n      // num: 6,\r\n      num: Math.ceil(Math.random() * 6),\r\n      isLocked: true,\r\n      lastRolledBy: currentPlayer,\r\n    });\r\n\r\n  // Event handler for dice onClick\r\n  const onClick = () => {\r\n    if (!isAnimating && !diceState.isLocked) {\r\n      setDiceState({ num: 0, isLocked: false, lastRolledBy: currentPlayer });\r\n      setIsAnimating(true);\r\n\r\n      new Audio(diceRollSound).play();\r\n\r\n      setTimeout(() => {\r\n        rotateDice();\r\n        setIsAnimating(false);\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={\"dice\" + (isAnimating ? \" dice-animation\" : \"\")}\r\n      onClick={onClick}\r\n      style={{\r\n        gridTemplateColumns: diceState.num > 1 ? \"repeat(2, 1fr)\" : \"1fr\",\r\n      }}\r\n    >\r\n      {Array(diceState.num)\r\n        .fill()\r\n        .map((_, i) => (\r\n          <div key={i}>\r\n            <div style={{ backgroundColor: currentPlayer }}></div>\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dice;\r\n","C:\\Users\\dev1\\Ludo-React\\src\\components\\stepsBox.js",["68"],"import { useRecoilValue } from \"recoil\";\r\nimport _ from \"lodash\";\r\n\r\nimport {\r\n  markColorIndexes,\r\n  markStarIndexes,\r\n  colorMap,\r\n} from \"../config/constants\";\r\nimport { allBlockState } from \"../recoil/atoms\";\r\nimport Coin from \"./coin\";\r\nimport StarBg from \"../assets/starOutline3.png\";\r\n\r\n/**\r\n * Component that holds the single step of the entire border steps grid.\r\n * @param {Object} props\r\n * @returns JSX\r\n */\r\nfunction StepsBox({ parent, adjacentDirection, index }) {\r\n  const blockState = useRecoilValue(allBlockState);\r\n  const parentKey = parent[0] + index;\r\n\r\n  const style = {\r\n    backgroundImage: markStarIndexes[adjacentDirection].markIndex.includes(\r\n      index\r\n    )\r\n      ? `url(${StarBg})`\r\n      : \"\",\r\n    backgroundColor: markColorIndexes[adjacentDirection].markIndex.includes(\r\n      index\r\n    )\r\n      ? parent\r\n      : \"transparent\",\r\n  };\r\n\r\n  return (\r\n    <div className=\"stepBox\" style={style}>\r\n      <div style={{ position: \"absolute\" }}>{parent[0] + index}</div>\r\n      {blockState[parentKey] &&\r\n        blockState[parentKey].map((elem, i) => {\r\n          return <Coin key={i} parent={colorMap[elem[0]]} index={elem} />;\r\n        })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StepsBox;\r\n",{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":2,"column":10,"nodeType":"75","messageId":"76","endLine":2,"endColumn":19},{"ruleId":"73","severity":1,"message":"77","line":12,"column":20,"nodeType":"75","messageId":"76","endLine":12,"endColumn":25},{"ruleId":"73","severity":1,"message":"78","line":12,"column":27,"nodeType":"75","messageId":"76","endLine":12,"endColumn":38},{"ruleId":"73","severity":1,"message":"79","line":14,"column":10,"nodeType":"75","messageId":"76","endLine":14,"endColumn":19},{"ruleId":"73","severity":1,"message":"80","line":18,"column":10,"nodeType":"75","messageId":"76","endLine":18,"endColumn":19},{"ruleId":"73","severity":1,"message":"81","line":4,"column":3,"nodeType":"75","messageId":"76","endLine":4,"endColumn":19},{"ruleId":"73","severity":1,"message":"82","line":1,"column":10,"nodeType":"75","messageId":"76","endLine":1,"endColumn":18},{"ruleId":"83","severity":1,"message":"84","line":104,"column":6,"nodeType":"85","endLine":104,"endColumn":21,"suggestions":"86"},{"ruleId":"87","severity":1,"message":"88","line":225,"column":7,"nodeType":"89","endLine":225,"endColumn":57},{"ruleId":"73","severity":1,"message":"74","line":1,"column":20,"nodeType":"75","messageId":"76","endLine":1,"endColumn":29},{"ruleId":"73","severity":1,"message":"90","line":2,"column":8,"nodeType":"75","messageId":"76","endLine":2,"endColumn":9},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'moves' is defined but never used.","'playerOrder' is defined but never used.","'Emulation' is defined but never used.","'diceState' is assigned a value but never used.","'currentDiceState' is defined but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'changePlayer', 'coinState', 'currentPlayer', 'parent', 'parentMoves', and 'setCoinState'. Either include them or remove the dependency array.","ArrayExpression",["93"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'_' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},"Update the dependencies array to be: [changePlayer, coinState, currentPlayer, diceState.num, parent, parentMoves, setCoinState]",{"range":"96","text":"97"},[3532,3547],"[changePlayer, coinState, currentPlayer, diceState.num, parent, parentMoves, setCoinState]"]